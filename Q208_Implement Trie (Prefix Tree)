class Node(object):
    def __init__(self):
        self.child={} # self.child=collections.defaultdict(Node)
        self.isword=False

class Trie(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root=Node()

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: None
        """
        current=self.root
        for w in word:
            if w not in current.child:
                current.child[w]=Node()
            current=current.child[w]
        current.isword=True

    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        current=self.root
        for w in word:
            if w not in current.child:
                return False
            current=current.child[w]
        return current.isword

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        current=self.root
        for w in prefix:
            if w not in current.child:
                return False
            current=current.child[w]
        return True


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
